/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { BOOTCAMPDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([
  113, 164, 49, 62, 43, 83, 194, 172,
]);

export function getUpdateJournalEntryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_JOURNAL_ENTRY_DISCRIMINATOR
  );
}

export type UpdateJournalEntryInstruction<
  TProgram extends string = typeof BOOTCAMPDAPP_PROGRAM_ADDRESS,
  TAccountJournalEntry extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountJournalEntry extends string
        ? WritableAccount<TAccountJournalEntry>
        : TAccountJournalEntry,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateJournalEntryInstructionData = {
  discriminator: ReadonlyUint8Array;
  title: string;
  message: string;
};

export type UpdateJournalEntryInstructionDataArgs = {
  title: string;
  message: string;
};

export function getUpdateJournalEntryInstructionDataEncoder(): Encoder<UpdateJournalEntryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['message', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_JOURNAL_ENTRY_DISCRIMINATOR })
  );
}

export function getUpdateJournalEntryInstructionDataDecoder(): Decoder<UpdateJournalEntryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['message', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getUpdateJournalEntryInstructionDataCodec(): Codec<
  UpdateJournalEntryInstructionDataArgs,
  UpdateJournalEntryInstructionData
> {
  return combineCodec(
    getUpdateJournalEntryInstructionDataEncoder(),
    getUpdateJournalEntryInstructionDataDecoder()
  );
}

export type UpdateJournalEntryAsyncInput<
  TAccountJournalEntry extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  journalEntry?: Address<TAccountJournalEntry>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: UpdateJournalEntryInstructionDataArgs['title'];
  message: UpdateJournalEntryInstructionDataArgs['message'];
};

export async function getUpdateJournalEntryInstructionAsync<
  TAccountJournalEntry extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BOOTCAMPDAPP_PROGRAM_ADDRESS,
>(
  input: UpdateJournalEntryAsyncInput<
    TAccountJournalEntry,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? BOOTCAMPDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    journalEntry: { value: input.journalEntry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.journalEntry.value) {
    accounts.journalEntry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.title)
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.journalEntry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateJournalEntryInstructionDataEncoder().encode(
      args as UpdateJournalEntryInstructionDataArgs
    ),
  } as UpdateJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UpdateJournalEntryInput<
  TAccountJournalEntry extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  journalEntry: Address<TAccountJournalEntry>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: UpdateJournalEntryInstructionDataArgs['title'];
  message: UpdateJournalEntryInstructionDataArgs['message'];
};

export function getUpdateJournalEntryInstruction<
  TAccountJournalEntry extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BOOTCAMPDAPP_PROGRAM_ADDRESS,
>(
  input: UpdateJournalEntryInput<
    TAccountJournalEntry,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateJournalEntryInstruction<
  TProgramAddress,
  TAccountJournalEntry,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BOOTCAMPDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    journalEntry: { value: input.journalEntry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.journalEntry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateJournalEntryInstructionDataEncoder().encode(
      args as UpdateJournalEntryInstructionDataArgs
    ),
  } as UpdateJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateJournalEntryInstruction<
  TProgram extends string = typeof BOOTCAMPDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    journalEntry: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: UpdateJournalEntryInstructionData;
};

export function parseUpdateJournalEntryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateJournalEntryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      journalEntry: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateJournalEntryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
