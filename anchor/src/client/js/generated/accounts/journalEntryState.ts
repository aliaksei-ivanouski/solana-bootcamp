/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const JOURNAL_ENTRY_STATE_DISCRIMINATOR = new Uint8Array([
  113, 86, 110, 124, 140, 14, 58, 66,
]);

export function getJournalEntryStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOURNAL_ENTRY_STATE_DISCRIMINATOR
  );
}

export type JournalEntryState = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  title: string;
  message: string;
};

export type JournalEntryStateArgs = {
  owner: Address;
  title: string;
  message: string;
};

export function getJournalEntryStateEncoder(): Encoder<JournalEntryStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['message', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: JOURNAL_ENTRY_STATE_DISCRIMINATOR })
  );
}

export function getJournalEntryStateDecoder(): Decoder<JournalEntryState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['message', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getJournalEntryStateCodec(): Codec<
  JournalEntryStateArgs,
  JournalEntryState
> {
  return combineCodec(
    getJournalEntryStateEncoder(),
    getJournalEntryStateDecoder()
  );
}

export function decodeJournalEntryState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JournalEntryState, TAddress>;
export function decodeJournalEntryState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JournalEntryState, TAddress>;
export function decodeJournalEntryState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<JournalEntryState, TAddress>
  | MaybeAccount<JournalEntryState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJournalEntryStateDecoder()
  );
}

export async function fetchJournalEntryState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JournalEntryState, TAddress>> {
  const maybeAccount = await fetchMaybeJournalEntryState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJournalEntryState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JournalEntryState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJournalEntryState(maybeAccount);
}

export async function fetchAllJournalEntryState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<JournalEntryState>[]> {
  const maybeAccounts = await fetchAllMaybeJournalEntryState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJournalEntryState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JournalEntryState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeJournalEntryState(maybeAccount)
  );
}
